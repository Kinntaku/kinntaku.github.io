---
import type { MarkdownHeading } from "astro";

export interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;

const tocHeadings = headings.filter(({ depth }) => depth > 1 && depth < 4);
---

<div id="toc-container">
  <button id="toc-toggle-btn">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="icon icon-tabler icons-tabler-outline icon-tabler-list-details"
      ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
        d="M13 5h8"></path><path d="M13 9h5"></path><path d="M13 15h8"
      ></path><path d="M13 19h5"></path><path
        d="M3 5h4v4h-4z"></path><path d="M3 15h4v4h-4z"></path></svg
    >
    <span class="sr-only">Toggle Table of Contents</span>
  </button>
  <div id="toc-panel">
    <div>
      <h2 class="text-lg font-semibold">目录</h2>
      <ul id="toc-list">
        {
          tocHeadings.map(heading => (
            <li class={`toc-item toc-depth-${heading.depth}`}>
              <a href={`#${heading.slug}`}>{heading.text}</a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>

<style>
  #toc-container {
    position: fixed;
    bottom: 2rem;
    left: 2rem;
    z-index: 50;
  }

  #toc-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    border-radius: 9999px;
    background-color: var(--accent);
    color: white;
    border: none;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    transition: transform 0.2s ease-in-out;
    cursor: pointer;
    position: fixed;
    bottom: 2rem;
    left: 2rem;
    z-index: 51;
  }

  #toc-toggle-btn:hover {
    transform: scale(1.1);
  }

  #toc-panel {
    display: none;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    width: 280px;
    overflow-y: auto;
    overflow-x: hidden;
    background-color: var(--background);
    border: none;
    border-right: 2px solid var(--accent);
    padding: 2rem 1rem 7rem 1rem; /* Bottom padding to avoid button overlap */
    box-shadow: none;
    z-index: 49;
  }
  
  #toc-panel > div {
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 100%;
  }

  #toc-panel h2 {
    text-align: left;
    flex-shrink: 0;
  }

  #toc-panel.is-open {
    display: block;
  }

  #toc-list {
    list-style: none;
    padding: 0;
    margin-top: 0.5rem;
    text-align: left;
    flex-shrink: 0;
  }

  .toc-item a {
    display: block;
    padding: 0.25rem 0;
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.2s;
  }

  .toc-item a:hover {
    color: var(--accent);
  }

  .toc-depth-3 {
    padding-left: 1rem;
    font-size: 0.9em;
    opacity: 0.8;
  }

  /* Desktop styles: auto show TOC when screen is wide enough */
  @media (min-width: 1440px) {
    #toc-panel {
      display: block;
    }
    
    #toc-panel.is-closed {
      display: none;
    }
  }
</style>

<script>
  function initToc() {
    const toggleBtn = document.getElementById("toc-toggle-btn");
    const tocPanel = document.getElementById("toc-panel");

    if (toggleBtn && tocPanel) {
      // Prevent scrolling the main page when scrolling inside TOC panel
      const handleWheel = (e: WheelEvent) => {
        const atTop = tocPanel.scrollTop === 0;
        const atBottom = tocPanel.scrollTop + tocPanel.clientHeight >= tocPanel.scrollHeight - 1;
        
        // Prevent page scroll if we're scrolling within bounds
        if ((e.deltaY < 0 && !atTop) || (e.deltaY > 0 && !atBottom)) {
          e.stopPropagation();
        } else if ((e.deltaY < 0 && atTop) || (e.deltaY > 0 && atBottom)) {
          // At boundaries, prevent default to stop page scroll
          e.preventDefault();
          e.stopPropagation();
        }
      };
      
      tocPanel.addEventListener("wheel", handleWheel, { passive: false });
      
      // Prevent touch scrolling from affecting the main page
      let startY = 0;
      
      tocPanel.addEventListener("touchstart", (e) => {
        startY = e.touches[0].clientY;
      }, { passive: true });
      
      tocPanel.addEventListener("touchmove", (e) => {
        const currentY = e.touches[0].clientY;
        const atTop = tocPanel.scrollTop === 0;
        const atBottom = tocPanel.scrollTop + tocPanel.clientHeight >= tocPanel.scrollHeight - 1;
        
        // Prevent page scroll
        if ((currentY > startY && !atTop) || (currentY < startY && !atBottom)) {
          e.stopPropagation();
        } else {
          e.preventDefault();
          e.stopPropagation();
        }
      }, { passive: false });

      // Remove existing listeners to avoid duplicates
      const newToggleBtn = toggleBtn.cloneNode(true) as HTMLElement;
      toggleBtn.parentNode?.replaceChild(newToggleBtn, toggleBtn);
      
      newToggleBtn.addEventListener("click", e => {
        e.stopPropagation();
        
        // Check if we're on desktop
        const isDesktop = window.innerWidth >= 1440;
        
        if (isDesktop) {
          // On desktop, toggle between visible and hidden
          tocPanel.classList.toggle("is-closed");
        } else {
          // On mobile, toggle is-open class
          tocPanel.classList.toggle("is-open");
        }
      });
    }

    // Close panel when clicking outside (only on mobile)
    const closeOutsideHandler = (e: Event) => {
      const tocPanel = document.getElementById("toc-panel");
      const toggleBtn = document.getElementById("toc-toggle-btn");
      
      if (window.innerWidth < 1440 && tocPanel) {
        if (
          tocPanel.classList.contains("is-open") &&
          !tocPanel.contains(e.target as Node) &&
          e.target !== toggleBtn
        ) {
          tocPanel.classList.remove("is-open");
        }
      }
    };
    
    document.removeEventListener("click", closeOutsideHandler);
    document.addEventListener("click", closeOutsideHandler);
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", initToc);
  
  // Re-initialize after view transitions (if enabled)
  document.addEventListener("astro:page-load", initToc);
</script>
